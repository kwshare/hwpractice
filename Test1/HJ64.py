# HJ64 MP3光标位置


while True:
    try:
        n = int(input())  # 储存歌曲总数
        s = input().strip()  # 储存操作
        l = []
        for i in range(1, n + 1):  # 建立歌曲列表（非必要，我这里是为了统一输出，完全可以不用列表直接输出）
            l.append(i)
        # 关键变量
        f = 1  # f 用于指示当前页面第1首歌曲的索引位置，即应对问题 1
        p = 1  # p 用于指示当前页面光标所在位置，即应对问题 2 ，一页最多显示4首歌，所以 p 的取值范围在 1，2，3，4 之中

        if n < 5:  # 第一种情况，歌曲总数最多一页，没有翻页操作，比较简单，实现方法很多，这里不做介绍
            for i in s:
                if i == 'U':
                    if p == 1:
                        p = n
                    else:
                        p -= 1
                if i == 'D':
                    if p == n:
                        p = 1
                    else:
                        p += 1
        # 第二种情况，歌曲总数多于一页，有翻页操作，详见代码注释
        else:
            for i in s:  # 依次遍历操作
                if i == 'U':  # 判断操作是否为 Up
                    if f == 1 and p == 1:  # 问题点3：特殊翻页处理；当且仅当，当前页面为歌曲1 2 3 4（f = 1）且光标位于位置 1（p = 1）时，从第一页翻到最后一页
                        f = n - 3  # 最后一页的4首歌为：n-3  n-2  n-1  n,因此 f = n-3
                        p = 4  # 特殊翻页过后，光标直接指向当前页面最后一首歌，即 p = 4
                    elif p == 1:  # 问题点3：一般翻页操作； 当光标位于当前页面第一首歌时，Up操作不会改变光标位置，即p=1不变，而向上翻页使得f = f-1
                        f -= 1
                    else:  # 问题点5：普通操作。当光标不在当前页面第一首歌时，Up操作只会改变光标位置（p = p-1），不会改变f
                        p -= 1
                if i == 'D':  # Down 操作同理，理解特殊翻页，一般翻页 f 和 p的取值即变化，即可进行
                    if f == n - 3 and p == 4:
                        f = 1
                        p = 1
                    elif p == 4:
                        f += 1
                    else:
                        p += 1

        for i in l[f - 1:f + 4 - 1]:  # 输出当前页，列表索引从0开始，因此变量 f 需要减 1
            print(i, end=' ')
        print()
        print(f + p - 1)

    except:
        break



'''
中等  通过率：30.71%  时间限制：1秒  空间限制：32M
知识点
数组
warning 校招时部分企业笔试将禁止编程题跳出页面，为提前适应，练习时请使用在线自测，而非本地IDE。
描述
MP3 Player因为屏幕较小，显示歌曲列表的时候每屏只能显示几首歌曲，用户要通过上下键才能浏览所有的歌曲。为了简化处理，假设每屏只能显示4首歌曲，光标初始的位置为第1首歌。


现在要实现通过上下键控制光标移动来浏览歌曲列表，控制逻辑如下：

歌曲总数<=4的时候，不需要翻页，只是挪动光标位置。

光标在第一首歌曲上时，按Up键光标挪到最后一首歌曲；光标在最后一首歌曲时，按Down键光标挪到第一首歌曲。



其他情况下用户按Up键，光标挪到上一首歌曲；用户按Down键，光标挪到下一首歌曲。



2. 歌曲总数大于4的时候（以一共有10首歌为例）：


特殊翻页：屏幕显示的是第一页（即显示第1 – 4首）时，光标在第一首歌曲上，用户按Up键后，屏幕要显示最后一页（即显示第7-10首歌），同时光标放到最后一首歌上。同样的，屏幕显示最后一页时，光标在最后一首歌曲上，用户按Down键，屏幕要显示第一页，光标挪到第一首歌上。



一般翻页：屏幕显示的不是第一页时，光标在当前屏幕显示的第一首歌曲时，用户按Up键后，屏幕从当前歌曲的上一首开始显示，光标也挪到上一首歌曲。光标当前屏幕的最后一首歌时的Down键处理也类似。



其他情况，不用翻页，只是挪动光标就行。

数据范围：命令长度1\le s\le 100\1≤s≤100 ，歌曲数量1\le n \le 150\1≤n≤150
进阶：时间复杂度：O(n)\O(n) ，空间复杂度：O(n)\O(n)
输入描述：
输入说明：
1 输入歌曲数量
2 输入命令 U或者D

输出描述：
输出说明
1 输出当前列表
2 输出当前选中歌曲

示例1
输入：
10
UUUU
复制
输出：
7 8 9 10
7

'''